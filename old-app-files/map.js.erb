// var getMap = function() {

  // prevent number highlighting on double-click
  $(".map").mousedown(function(e){ e.preventDefault(); });

        var w = 1300;
        var h = 700;

        var blueStates = [];
        var redStates = [];
        var blueEV = 0;
        var redEV = 0;
        var unassignedEV = 538;
        var stateColor = "neutral";

  var checkForWinner = function() {
    checkPartyWinner(blueEV, ".dem-tally");
    checkPartyWinner(redEV, ".rep-tally");
  };

  var checkPartyWinner = function(partyTally, evDisplay) {
    if (partyTally >= 270) {
      if (!$(evDisplay).children(".winner").length) {
        $(evDisplay).prepend('<div class="winner"><%= image_tag("check.png") %> winner </div>');
      }
    } else {
      $(evDisplay).children(".winner").remove();
    };
  };

        var getUserMapData = function() {
          // if loading an existing map
          var userMapDataClean = userMapData.replace(/&quot;/g, '"').replace(/=&gt;/g, ":");
          userMapDataParsed = JSON.parse(userMapDataClean);
          blueEV = userMapDataParsed["blue"];
          redEV = userMapDataParsed["red"];
          blueStates = userMapDataParsed["blueStates"];
          redStates = userMapDataParsed["redStates"];
          unassignedEV = 538 - (blueEV + redEV);
          checkForWinner();
        };

        if (userMapData) {
          getUserMapData();
        };

        var getStateColor = function(d) {
          var blueStateArray = userMapDataParsed["blueStates"];
          var redStateArray = userMapDataParsed["redStates"];
          var stateName = d.properties.name;
          if ( blueStateArray.includes(stateName) ) {
            stateColor = "blue";
          } else if ( redStateArray.includes(stateName) ) {
            stateColor = "red";
          } else {
            stateColor = "neutral";
          }
        };

        var projection = d3.geo.albersUsa()
            .translate([w/2, h/2])
            .scale([1500]);

        var path = d3.geo.path()
            .projection(projection);

        var svg = d3.select(".map")
            .append("svg")
            .attr("width", w)
            .attr("height", h);

        var tip = d3.tip()
            .attr("class", "d3-tip")
            .offset(function (d) {
              if (d.abbr === "DC") {
                return [20,100]
              } else if (d.abbr === "NJ") {
                return [-5,0]
              } else if (d.abbr === "RI") {
                return [20,80]
              } else { return [10,0] }
            })
            .html(function(d){
              return d.properties.name + ": " + d.ev;
            });

        svg.call(tip);

        d3.json("/us-states.json", function(json) {
          svg.selectAll("path")
              .data(json.features)
              .enter()
              .append("path")
              .attr("d", path)
              .attr("class", function(d) {
                if (userMapData) {
                  getStateColor(d);
                } else {
                  stateColor = "neutral";
                }
                return stateColor;
              })
              .attr("id", "states")
              .on("click", click)
              .on("contextmenu", rightClick)
              .on('mouseover', tip.show)
              .on('mouseout', tip.hide);
          svg.selectAll("text")
              .data(json.features)
              .enter()
              .append("text")
              .attr("transform", function(d) { return "translate(" + path.centroid(d) + ")"; })
              .attr("dx", function (d) {
                return d.dx
              })
              .attr("dy", function (d) {
                return d.dy
              })
              .attr("class", "ev")
              .attr("style", function (d) {
                  if (d.abbr === "DE" || d.abbr === "HI" || d.abbr === "RI") {
                    return "fill: black"
                  } else {
                    return "fill: white"
                  }
              })
              .text(function(d) { return d.ev; });
        });

  var click = function(d) {
    if (this.classList == "neutral") {
      d3.select(this)
          .classed({"neutral": false, "blue": true});
      blueStates.push(d.properties.name);
      blueEV += d.ev;
      unassignedEV -= d.ev;
    } else if (this.classList == "blue") {
      d3.select(this)
          .classed({"blue": false, "red": true});
      blueStates.splice($.inArray(d.properties.name, blueStates),1);
      blueEV -= d.ev;
      redStates.push(d.properties.name);
      redEV += d.ev;
    } else {
      d3.select(this)
          .classed({"red": false, "neutral": true});
      redStates.splice($.inArray(d.properties.name, redStates),1);
      redEV -= d.ev;
      unassignedEV += d.ev;
    };
    updateTally();
    updateHiddenForm();
    checkForWinner();
  };

  var rightClick = function(d) {
    if (this.classList == "neutral") {
      d3.select(this)
          .classed({"neutral": false, "red": true});
      redStates.push(d.properties.name);
      redEV += d.ev;
      unassignedEV -= d.ev;
    } else if (this.classList == "blue") {
      d3.select(this)
          .classed({"blue": false, "neutral": true});
      blueStates.splice($.inArray(d.properties.name, blueStates),1);
      blueEV -= d.ev;
      unassignedEV += d.ev;
    } else {
      d3.select(this)
          .classed({"red": false, "blue": true});
      redStates.splice($.inArray(d.properties.name, redStates),1);
      redEV -= d.ev;
      blueStates.push(d.properties.name);
      blueEV += d.ev;
    };
    updateTally();
    updateHiddenForm();
    checkForWinner();
  };

  var updateTally = function() {
    $("#dems").text(blueEV);
    $("#reps").text(redEV);
    $("#unassigned").text(unassignedEV);
  };

  var updateHiddenForm = function() {
    mapData = {};
    mapData["blue"] = blueEV;
    mapData["red"] = redEV;
    mapData["blueStates"] = blueStates;
    mapData["redStates"] = redStates;
    mapData = JSON.stringify(mapData);
    $("#map_data").val(mapData);
  };

  var reset = function() {
    d3.selectAll("path")
        .classed({"neutral": true, "red": false, "blue": false});
    blueEV = 0;
    redEV = 0;
    unassignedEV = 538;
    updateTally();
    $(".dem-tally").children(".winner").remove();
    $(".rep-tally").children(".winner").remove();
  };

  $(".reset").on("click", reset);

  var dismissAlert = function() {
    $(".alert-success").delay(3000).slideUp(200, function() {
      $(this).alert('close');
    });
  };

  dismissAlert();

  // $(".save-form").hide();

  $(".save-btn").on("click", function() {
    $(".save-form").show();
    $(".save-btn").hide();

  })
// }
